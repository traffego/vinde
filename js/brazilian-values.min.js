// Importação da biblioteca brazilian-values para validação de CPF
// Versão minificada para uso em produção

// Carregando a biblioteca brazilian-values
if (typeof module !== 'undefined' && module.exports) {
    // Node.js environment
    const { isCPF } = require('../node_modules/brazilian-values/dist/brazilian-values.js');
    module.exports = { isCPF };
} else {
    // Browser environment - carregando via script tag
    // A biblioteca será carregada via CDN ou arquivo local
}

// Função global para validação de CPF usando brazilian-values
function validarCPFBrazilian(cpf) {
    if (typeof window !== 'undefined' && window.BrazilianValues) {
        return window.BrazilianValues.isCPF(cpf);
    }
    
    // Fallback para validação manual se a biblioteca não estiver disponível
    if (!cpf) return false;
    
    cpf = cpf.replace(/[^\d]/g, '');
    
    if (cpf.length !== 11) return false;
    if (/^(\d)\1{10}$/.test(cpf)) return false;
    
    let soma = 0;
    for (let i = 0; i < 9; i++) {
        soma += parseInt(cpf.charAt(i)) * (10 - i);
    }
    let resto = 11 - (soma % 11);
    let digito1 = resto < 2 ? 0 : resto;
    
    if (parseInt(cpf.charAt(9)) !== digito1) return false;
    
    soma = 0;
    for (let i = 0; i < 10; i++) {
        soma += parseInt(cpf.charAt(i)) * (11 - i);
    }
    resto = 11 - (soma % 11);
    let digito2 = resto < 2 ? 0 : resto;
    
    return parseInt(cpf.charAt(10)) === digito2;
}